import React, {Component} from 'react';
import {connect} from 'react-redux';
import PropTypes from 'prop-types';
import {Link} from 'react-router-dom';
import {initLikePost, initRemovePost, initUnlikePost} from '../../store/actions/post';

class PostItem extends Component {
  onDeleteClick = () => {
    this.props.initRemovePost(this.props.post._id);
  };

  onLikeClick = () => {
    this.props.initLikePost(this.props.post._id);
  };

  onUnlikeClick = () => {
    this.props.initUnlikePost(this.props.post._id);
  };

  markLikedPost() {
    const {likes} = this.props.post;
    return likes.filter(post => post.user === this.props.auth.user.id).length > 0 ?
      'text-info fas fa-thumbs-up' : 'fas fa-thumbs-up';
  }

  render() {
    const {post, auth, areActionsShown} = this.props;
    const postActions = areActionsShown ? (<div>
      <button type="button" className="btn btn-light mr-1" onClick={this.onLikeClick}>
        <i className={this.markLikedPost()}></i>
        <span className="badge badge-light">{post.likes.length}</span>
      </button>
      <button type="button" className="btn btn-light mr-1" onClick={this.onUnlikeClick}>
        <i className="text-secondary fas fa-thumbs-down"></i>
      </button>
      <Link className="btn btn-info mr-1" to={`posts/${post._id}`}>
        Comments
      </Link>
      {post.user === auth.user.id ? (
        <button
          onClick={this.onDeleteClick}
          type="button"
          className="btn btn-danger mr-1"
          disabled={this.props.isDataLoading}>
          <i className="fas fa-times"/>
        </button>) : null}
    </div>) : null;

    return (
      <div className="card card-body mb-3">
        <div className="row">
          <div className="col-md-2">
            <a href={`/developers/user/${post.user}`}>
              <img className="rounded-circle d-none d-md-block"
                   src={post.avatar}
                   alt="User avatar"
                   title="Avatar generated by Gravatar"/>
            </a>
            <br/>
            <p className="text-center">{post.name}</p>
          </div>
          <div className="col-md-10">
            <p className="lead">{post.text}</p>
            {postActions}
          </div>
        </div>
      </div>
    );
  }
}

PostItem.defaultProps = {
  areActionsShown: false
};

PostItem.propTypes = {
  initLikePost: PropTypes.func.isRequired,
  initUnlikePost: PropTypes.func.isRequired,
  initRemovePost: PropTypes.func.isRequired,
  auth: PropTypes.object.isRequired,
  isDataLoading: PropTypes.bool.isRequired,
  post: PropTypes.object.isRequired
};

const mapStateToProps = state => {
  return {
    auth: state.auth,
    isDataLoading: state.common.isDataLoading
  };
};

const mapDispatchToProps = dispatch => {
  return {
    initLikePost: (id) => dispatch(initLikePost(id)),
    initUnlikePost: (id) => dispatch(initUnlikePost(id)),
    initRemovePost: (id) => dispatch(initRemovePost(id))
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(PostItem);